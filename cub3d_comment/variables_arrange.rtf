typedef struct				s_ray
{
    // camera_x : 카메라 평면에서의 x좌표(-1 ~ 1)
	double					camera_x;
    // (dir_x, dir_y) : 광선의 방향벡터
	double					dir_x;
	double					dir_y;
    // (map_x, map_y) : 광선의 현재위치(광선이 있는 칸)
	int						map_x;
	int						map_y;
	// side_dist_x : 첫 이동거리 저장(https://github.com/365kim/raycasting_tutorial/blob/master/3_untextured_raycaster.md, 그림9)
	// side_dist_y : 첫 이동거리 저장(https://github.com/365kim/raycasting_tutorial/blob/master/3_untextured_raycaster.md, 그림9)
	double					side_dist_y;
	double					side_dist_x;
    // (delta_dist_x, delta_dist_y) : 광선의 고정 이동거리(유도는 공책에)
	double					delta_dist_x;
	double					delta_dist_y;
    // prep_wall_dist : 닮음으로 계산한 수직거리
	double					perp_wall_dist;
    // step_x : 광선의 방향벡터x값이 음수면 -1, 양수면 1(0이면 상관없음)
    // step_y : 광선의 방향벡터y값이 음수면 -1, 양수면 1(0이면 상관없음)
	int						step_x;
	int						step_y;
    // hit : 벽과 부딪혔는지 여부
	int						hit;
    // 부딪힌 방향(x면 음의방향 : 0, x면 양의방향 : 1, y면 음의방향 : 2, y면 양의방향 : 3)
	int						side;
    // line height : 화면에 그려야 할 수직선 높이(멀리있는게 작게그려지게 하기위해 역수취한 후 화면높이 곱)
	int						line_height;
    // draw_start : 그리기 시작하는 점 (화면높이절반 - 그릴높이절반), 위에서부터 그림
	int						draw_start;
    // draw_end : 그리기가 끝나는 점(화면높이절반 + 그릴높이절반)
	int						draw_end;
    // tex_num : 텍스쳐번호
	int						tex_num;
    // wall_x : 광선이 칸 안에서 부딪힌 위치(0~1)
	double					wall_x;
    // step : 텍스쳐 속 이동할 거리
	double					step;
    // tex_pos : 텍스쳐 속 시작 좌표(슬랙+공책그림)
	double					tex_pos;
    // tex_x : 텍스쳐 속 x좌표(텍스쳐 너비 곱해서 텍스쳐 속 위치 계산)
	int						tex_x;
    // tex_y : 텍스쳐 속 y좌표, step을 더하다가 텍스쳐보다 커지는 경우를 대비해 텍스쳐 높이로 나눈 나머지를 취함(실제 텍스쳐는 1차포인터라 직선형임, 잘라서 생각)
	int						tex_y;
}							t_ray;

// u_div : 스프라이트 폭 조절(스프라이트_width를 uDiv로 나눠주면 홀쭉해지거나 뚱뚱해진다.)
// v_div : 스프라이트 높이 조절(스프라이트_height를 vDiv로 나눠주면 길어지거나 납작해진다.)
// v_mode : 커지면 스프라이트가 아래로 내려옴

typedef struct				s_sprite_ray
{
	double					x;
	double					y;
    // diterminant : 카메라행렬의 디터미넌트
	double					diterminant;
	// transform_x : 스프라이트가 화면안으로 들어가서 얼마나 옆으로 갔는지
	// transform_y : 스프라이트가 화면안으로 들어간 깊이
	double					transform_x;
	double					transform_y;
    // s_ray->screen_x : 스프라이트가 그려질 중간지점(화면중점 + 화면중점 * 벌어진비율)
	int						screen_x;
    // v_move_screen : 커지면 스프라이트 중점이 상승함(draw_start, draw_end에 각각 더해줄 변수)
	int						v_move_screen;
    // s_ray->height : 그릴 스프라이트 높이(화면높이 / 스프라이트깊이)
	int						height;
    // s_ray->width : 스프라이트 폭(화면)(텍스쳐와 같은 비율로 보여주기 위해 기본값이 s_ray->height와 동일)
	int						width;
	// s_ray->draw_start_x : 스프라이트 그리기 시작할 좌측지점(스프라이트 중점에서 스프라이트 폭의 절반만큼 왼쪽으로)
	// s_ray->draw_end_x : 스프라이트 그리기를 끝낼 우측지점(스프라이트 중점에서 스프라이트 폭의 절반만큼 오른쪽으로)
    // s_ray->draw_start_y : 스프라이트 그리기 시작할 높이(화면높이 절반에서 스프라이트 높이 절반만큼 아래로)
    // s_ray->draw_end_y : 스프라이트 그리기를 끝낼 높이(화면높이 절반에서 스프라이트 높이 절반만큼 위로)
	int						draw_start_x;
	int						draw_start_y;
	int						draw_end_x;
	int						draw_end_y;
    // tex_x : 스프라이트그림파일(텍스쳐) 속 x좌표(현위치 -(그릴스프라이트중점 - 그릴스프라이트가로절반)) * 텍스쳐/그릴스프라이트크기
    // s_ray->tex_y : 스프라이트그림파일(텍스쳐)속 y좌표(텍스쳐 높이로 나누고 텍스쳐 높이 곱했다)
	int						tex_x;
	int						tex_y;
}							t_sprite_ray;

typedef struct				s_player
{
	double					x;
	double					y;
	double					dir_x;
	double					dir_y;
	double					plane_x;
	double					plane_y;
	double					move_speed;
	double					rot_speed;
}

typedef struct				s_info
{
	void					*mlx;
	void					*win;
	t_img					img;
	t_player				player;
	t_ray					ray;
	t_sprite_ray			s_ray;
	t_sprite				*sprite;
	int						**buf;
	double					*z_buffer;
	int						**texture;
	int						fd;
	int						width;
	int						height;
	int						map_width;
	int						map_height;
	char					**map;
	char					*north_texture_path;
	char					*south_texture_path;
	char					*west_texture_path;
	char					*east_texture_path;
	char					*sprite_texture_path;
	int						floor_color;
	int						ceiling_color;
	int						dir; // 플레이어 초기방향
	int						num_sprite;
}							t_info;